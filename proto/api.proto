// Copyright Roger
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package postgresServer;
import "github.com/mwitkow/go-proto-validators/validator.proto";
service Api {
  rpc Projects (ProjectsRequest) returns (ProjectsReply);
  rpc ProjectInitialized (ProjectInitializedRequest) returns (ProjectInitializedReply);
  rpc Features (FeaturesRequest) returns (FeaturesReply);
  rpc Feature (FeatureRequest) returns (FeatureReply);
  rpc ProjectFeaturesByProjectId (ProjectFeaturesByProjectIdRequest) returns (ProjectFeaturesByProjectIdReply);
  rpc CreateProjectFeature (CreateProjectFeatureRequest) returns (CreateProjectFeatureReply);
}

message CreateProjectFeatureRequest {
  int32 feature_id = 1 [(validator.field) = {int_gt: 0}];
  string project_features_type = 2;
  string project_features_config = 3;
  int32 project_id = 4 [(validator.field) = {int_gt: 0}];
  int32 feature_version_id = 5 [(validator.field) = {int_gt: 0}];
  string project_features_install_name = 6 [(validator.field) = {string_not_empty: true}];
  int32 project_features_sort_order = 7;
  string project_features_route_path = 8;
}

message CreateProjectFeatureReply {}

message Feature {
  int32 feature_id = 1;
  string feature_name = 2;
  string feature_labels = 3;
  string feature_types = 4;
  string feature_intro = 5;
  repeated FeatureVersion feature_version = 6;
  int32 project_features_id = 7;
  string project_features_type = 8;
  string project_features_config = 9;
  int32 feature_version_id = 10;
  bool feature_onboot = 11;
}
message FeatureVersion {
  int32 feature_version_id = 1;
  string feature_version_name = 2;
  string feature_version_config = 3;
  string feature_version_intro = 4;
}
message FeaturesRequest {
}
message FeaturesReply{
  repeated Feature feature = 1;
}

message FeatureRequest {
  int32 feature_id = 1 [(validator.field) = {int_gt: 0}];
}
message FeatureReply{
  Feature feature = 1;
}

message ProjectInitializedRequest {
  string projects = 1 [(validator.field) = {int_gt: 0}];
}
message ProjectInitializedReply {
  repeated ProjectDetails projects = 1;
}

message ProjectsRequest {
}

message ProjectFeature{
  int32 project_features_id = 1;
  string project_features_type = 2;
  int32 project_features_inherit_from = 3;
  string project_features_config = 4;
}

message ProjectFeaturedDetails {
  int32 project_id = 1;
  string project_name = 2;
  string project_content = 3;
  repeated ProjectFeature project_features = 4;
}

message ProjectDetails {
  int32 project_id = 1;
  string project_name = 2;
  string project_content = 3;
}

message ProjectsReply {
  repeated ProjectDetails projects = 1;
}


message ProjectFeatureAll{
  int32 project_features_id = 1;
  string project_features_type = 2;
  string project_features_config = 3;
  int32 feature_id = 4;
  string feature_name = 5;
  string feature_labels = 6;
  string feature_types = 7;
  string feature_intro = 8;
  int32 feature_version_id = 9;
  string feature_version_name = 10;
  bool feature_onboot = 11;
  string project_features_install_name = 12;
  string project_features_route_path = 13;
  int32 project_features_deploy_to = 14;

}
message ProjectFeaturesByProjectIdRequest{
  int32 project_id = 1 [(validator.field) = {int_gt: 0}];
}
message ProjectFeaturesByProjectIdReply{
  repeated ProjectFeatureAll features = 1;
}